{"version":3,"sources":["components/Title.js","components/Todo.js","components/TodoForm.js","firebase.js","reducer.js","StateProvider.js","components/Login.js","components/UserHeader.js","components/TasksList.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","Todo","todo","completeTodo","removeTodo","style","textDecoration","data","done","onClick","id","TodoForm","addTodo","useState","value","setValue","handleSubmit","e","preventDefault","onSubmit","type","placeholder","onChange","target","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","actionTypes","reducer","state","action","console","log","user","StateContext","createContext","StateProvider","initialState","children","Provider","useReducer","useStateValue","useContext","Login","dispatch","history","useHistory","src","setPersistence","Auth","Persistence","LOCAL","then","signInWithPopup","result","localStorage","setItem","JSON","stringify","push","catch","error","alert","message","UserHeader","parse","getItem","useEffect","displayName","signOut","clear","TasksList","todos","setTodos","collection","doc","email","orderBy","onSnapshot","snapshot","docs","map","todoObj","update","delete","text","add","timestamp","FieldValue","serverTimestamp","key","App","exact","path","render","to","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd0b76a1.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction Title(){\n    return(\n      <div className=\"title text-5xl\">\n        <h1>Todo app</h1>\n      </div>\n    )\n  }\n\n  export default Title","import React from \"react\"\n\nfunction Todo({ todo, completeTodo, removeTodo }) {\n    return (\n      <div\n        className=\"todo border-2\"\n        style={{ textDecoration: todo.data.done ? \"line-through\" : \"\" }}>\n        <label className=\".text-xl .break-words\">{todo.data.todo}</label>\n  \n        <div className=\"md:flex-shrink-0\">\n          <button\n          className=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\"\n          onClick={() => completeTodo(todo)}> {todo.data.done ? \"Uncomplete\" : \"Complete\"}</button>\n          <button \n          className=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\"\n          onClick={() => removeTodo(todo.id)}>x</button>\n        </div>\n      </div>\n    );\n  }\n\n  export default Todo","import React, { useState } from \"react\"\n\n\nfunction TodoForm({ addTodo }) {\n    const [value, setValue] = useState(\"\");\n  \n    const handleSubmit = e => {\n      e.preventDefault();\n      if (!value) return;\n      addTodo(value);\n      setValue(\"\");\n    };\n  \n    return (\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          placeholder=\"Enter an item and press Enter or Add button\"\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n        <div className=\"py-2\">\n        <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" onClick={handleSubmit}> Add todo </button>\n        </div>\n      </form>\n    );\n  }\n\n  export default TodoForm","import firebase from \"firebase\"\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyASzQbwCMeKVB1ivtLrLUC2lC4LVzy5BkM\",\n    authDomain: \"my-todo-app-a4bf2.firebaseapp.com\",\n    databaseURL: \"https://my-todo-app-a4bf2.firebaseio.com\",\n    projectId: \"my-todo-app-a4bf2\",\n    storageBucket: \"my-todo-app-a4bf2.appspot.com\",\n    messagingSenderId: \"696490217141\",\n    appId: \"1:696490217141:web:5d87b9dc452a316f6eb8fc\",\n    measurementId: \"G-BJPMK0652R\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\nconst db = firebaseApp.firestore()\nconst auth = firebase.auth()\nconst provider = new firebase.auth.GoogleAuthProvider()\n\nexport{auth, provider}\nexport default db"," export const initialState = {\n     user:null\n }\n\n export const actionTypes = {\n     SET_USER: \"SET_USER\"\n }\n\n const reducer = (state, action) => {\n     console.log(action)\n     switch(action.type){\n         case actionTypes.SET_USER:\n             return {\n                 ...state,\n                 user: action.user\n             }\n             default:\n                 return state\n     }\n }\n\n export default reducer","import React, { createContext, useContext, useReducer } from \"react\"\n\nexport const StateContext = createContext()\n\nexport const StateProvider = ({ reducer, initialState, children}) => (\n    <StateContext.Provider value = {useReducer(reducer, initialState)}>\n        {children}\n    </StateContext.Provider>\n)\n\nexport const useStateValue = () => useContext(StateContext)","import React, { useState } from \"react\";\nimport \"../styles/Login.css\";\nimport { auth, persistence, provider } from \"../firebase\";\nimport { actionTypes } from \"../reducer\";\nimport { useStateValue } from \"../StateProvider\";\nimport { useHistory } from \"react-router-dom\";\nimport firebase from \"firebase\"\n\nfunction Login() {\n  const [state, dispatch] = useStateValue();\n  const history = useHistory();\n\n  const signIn = (e) => {\n    e.preventDefault();\n\n    auth\n      .setPersistence(firebase.auth.Auth.Persistence.LOCAL)\n      .then( function() {\n        return auth.signInWithPopup(provider)\n        }\n      )\n      .then((result) => {\n        localStorage.setItem(\"user\", JSON.stringify(result.user)) \n        dispatch({\n          type: actionTypes.SET_USER,\n          user: result.user,\n        });\n      })\n      .then( () => {\n        history.push(\"/taskList\")\n      })\n      .catch((error) => alert(error.message));\n  };\n\n  return (\n    <div className=\"login\">\n      <div className=\"login__title text-2xl\">Hey, welcome to todo list !</div>\n      <div className=\"login__logo\">\n        <img src=\"https://image.freepik.com/free-vector/vector-illustration-cosmonaut_1441-11.jpg\" />\n      </div>\n      <button\n        className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n        type=\"submit\"\n        onClick={signIn}\n      >\n        Sign in\n      </button>\n      <p> By signing you accept that this is a test version and some of your data might be visible to the developer</p>\n    </div>\n  );\n}\n\nexport default Login;\n","import { auth } from '../firebase'\nimport React, { useEffect }  from 'react'\nimport { useStateValue } from \"../StateProvider\"\nimport { useHistory } from \"react-router-dom\";\n\nfunction UserHeader(){\n    // const[{user}, dispatch] = useStateValue()\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n    const history = useHistory();   \n\n    const logOutUser = (e) => {\n        e.preventDefault()\n\n        auth\n            .signOut()\n            .then(function(){\n                console.log(\"Cleaning local storage\")\n                history.push(\"/login\")\n                localStorage.clear()\n            })\n\n    }\n\n    useEffect(() => {\n        console.log(user)\n      },[]);\n\n    return(\n        <div className=\"flex flex-wrap bg-gray-200\"> \n            <div>{user.displayName}</div>\n            <div><button className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded absolute top-0 right-0\" onClick={logOutUser}>Logout</button></div>\n        </div>\n    )\n}\n\nexport default UserHeader","import React, { useState } from \"react\";\nimport firebase from \"firebase\";\nimport db from \"../firebase\";\nimport { useEffect } from \"react\";\nimport { useStateValue } from \"../StateProvider\"\n\nimport Title from \"./Title\"\nimport Todo from \"./Todo\"\nimport TodoForm from \"./TodoForm\"\nimport UserHeader from \"./UserHeader\"\n\nfunction TasksList(){\n\n    // const[{user}, dispatch] = useStateValue()\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n    const [todos, setTodos] = useState([]);\n\n    useEffect(() => {\n      db.collection(\"users\")\n      .doc(user.email)\n      .collection(\"TestTodoList\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot(snapshot => (\n          setTodos(snapshot.docs.map( doc => (\n              {id: doc.id, data: doc.data()}\n            )\n          ))\n      ))\n    },[]);\n\n    const addTodo = text => {\n    db.collection(\"users\")\n    .doc(user.email)\n    .collection(\"TestTodoList\")\n    .add({\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      done:false,\n      todo:text\n    })\n  };\n\n  const completeTodo = todoObj => {\n    db.collection(\"users\")\n    .doc(user.email)\n    .collection(\"TestTodoList\")\n    .doc(todoObj.id).update({done:!todoObj.data.done})\n  };\n\n  const removeTodo = id => {\n    db.collection(\"users\")\n    .doc(user.email)\n    .collection(\"TestTodoList\")\n    .doc(id).delete()\n  };\n\nreturn(\n        <>\n        <Title/>\n        <UserHeader/>\n        <TodoForm addTodo={addTodo} />\n\n\n        {todos.map((todo) => (\n          <Todo\n            key={todo.id}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        ))}\n    \n      </>\n    )\n}\n\nexport default TasksList","import React, { useState } from \"react\";\nimport \"./styles/App.css\";\nimport \"./styles/Todo.css\";\nimport './tailwind.output.css';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport Title from \"./components/Title\";\nimport Todo from \"./components/Todo\";\nimport TodoForm from \"./components/TodoForm\";\nimport { useEffect } from \"react\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nimport Login from \"./components/Login\";\nimport { useStateValue } from \"./StateProvider\"\nimport TasksList from \"./components/TasksList\";\n\nimport { actionTypes } from \"./reducer\"\n\nfunction App() {\n  \n  const [{}, dispatch] = useStateValue();\n  const user = JSON.parse(localStorage.getItem(\"user\"))\n\n  // useEffect(() => {\n  //   firebase.auth().onAuthStateChanged(authUser => {\n  //     console.log(\"The user >>>\", authUser)\n\n  //     if (authUser) {\n  //       // the user just logged in / the user was logged in\n\n  //       dispatch({\n  //         type: 'SET_USER',\n  //         user: authUser\n  //       })\n  //     } else {\n  //       // the user is logged out\n  //       dispatch({\n  //         type: 'SET_USER',\n  //         user: null\n  //       })\n  //     }\n\n  //   })\n  // }, [])\n\n\n  return (\n    <Router>\n      <div className=\"app container mx-auto px-4\">\n      <Switch>\n      <Route exact path=\"/\" render={() => (\n             user === null ? <Redirect to=\"/login\"/> : <Redirect to=\"/taskList\"/>\n        )}/>\n         <Route exact path=\"/my-app\" render={() => (\n             <Redirect to=\"/login\"/>\n        )}/>\n        <Route exact path=\"/login\">\n          <Login/>\n        </Route>\n        <Route exact path=\"/taskList\">\n          <TasksList/>\n        </Route>\n      </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from \"./StateProvider\";\nimport reducer, { initialState } from './reducer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState = {initialState} reducer={reducer}>\n        <App />  \n    </StateProvider> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}