{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","completeTodo","removeTodo","className","style","textDecoration","isCompleted","class","text","onClick","TodoForm","addTodo","useState","value","setValue","handleSubmit","e","preventDefault","onSubmit","type","placeholder","onChange","target","Title","App","todos","setTodos","newTodos","currentTodoCompleted","splice","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAIA,SAASA,EAAT,GAA0D,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WACzC,OACE,yBACEC,UAAU,OACVC,MAAO,CAAEC,eAAgBN,EAAKO,YAAc,eAAiB,KAC7D,2BAAOC,MAAM,YAAYR,EAAKS,MAE9B,6BACE,4BACAD,MAAM,yGACNE,QAAS,kBAAMR,EAAaD,KAF5B,IAEsCD,EAAKO,YAAc,aAAe,YACxE,4BACAC,MAAM,yGACNE,QAAS,kBAAMP,EAAWF,KAF1B,OAQR,SAASU,EAAT,GAAgC,IAAZC,EAAW,EAAXA,QAAW,EACHC,mBAAS,IADN,mBACtBC,EADsB,KACfC,EADe,KAGvBC,EAAe,SAAAC,GACnBA,EAAEC,iBACGJ,IACLF,EAAQE,GACRC,EAAS,MAGX,OACE,0BAAMI,SAAUH,GACd,2BACEI,KAAK,OACLZ,MAAM,6HACNa,YAAY,8CACZP,MAAOA,EACPQ,SAAU,SAAAL,GAAC,OAAIF,EAASE,EAAEM,OAAOT,UAEnC,4BAAQN,MAAM,uEAAuEE,QAASM,GAA9F,UAMN,SAASQ,IACP,OACE,yBAAKpB,UAAU,SACb,yCA8CSqB,MAzCf,WAAgB,IAAD,EACaZ,mBAAS,IADtB,mBACNa,EADM,KACCC,EADD,KAQPzB,EAAe,SAAAD,GACnB,IAAM2B,EAAQ,YAAOF,GACfG,EAAuBD,EAAS3B,GAAOM,YAC7CqB,EAAS3B,GAAOM,aAAesB,EAE/BF,EAASC,IAGLzB,EAAa,SAAAF,GACjB,IAAM2B,EAAQ,YAAOF,GACrBE,EAASE,OAAO7B,EAAO,GACvB0B,EAASC,IAGX,OACE,yBAAKpB,MAAM,8CACT,yBAAKJ,UAAU,aACf,kBAACoB,EAAD,MACGE,EAAMK,KAAI,SAAC/B,EAAMC,GAAP,OACT,kBAACF,EAAD,CACEiC,IAAK/B,EACLA,MAAOA,EACPD,KAAMA,EACNE,aAAcA,EACdC,WAAYA,OAGhB,kBAACQ,EAAD,CAAUC,QAhCA,SAAAH,GACd,IAAMmB,EAAQ,sBAAOF,GAAP,CAAc,CAAEjB,UAC9BkB,EAASC,SCjDOK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.adcb1d54.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport './tailwind.output.css';\n\nfunction Todo({ todo, index, completeTodo, removeTodo }) {\n  return (\n    <div\n      className=\"todo\"\n      style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}>\n      <label class=\".text-xl\">{todo.text}</label>\n\n      <div>\n        <button\n        class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\"\n        onClick={() => completeTodo(index)}> {todo.isCompleted ? \"Uncomplete\" : \"Complete\"}</button>\n        <button \n        class=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\"\n        onClick={() => removeTodo(index)}>x</button>\n      </div>\n    </div>\n  );\n}\n\nfunction TodoForm({ addTodo }) {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n        placeholder=\"Enter an item and press Enter or Add button\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n      <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" onClick={handleSubmit}> Add </button>\n\n    </form>\n  );\n}\n\nfunction Title(){\n  return(\n    <div className=\"title\">\n      <h1>Todo app</h1>\n    </div>\n  )\n}\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  const addTodo = text => {\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n    const currentTodoCompleted = newTodos[index].isCompleted\n    newTodos[index].isCompleted = !currentTodoCompleted;\n    \n    setTodos(newTodos);\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    <div class=\"max-w-sm rounded overflow-hidden shadow-lg\">\n      <div className=\"todo-list\">\n      <Title/>\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}