{"version":3,"sources":["components/Title.js","components/Todo.js","components/TodoForm.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","Todo","todo","completeTodo","removeTodo","style","textDecoration","data","done","onClick","id","TodoForm","addTodo","useState","value","setValue","handleSubmit","e","preventDefault","onSubmit","type","placeholder","onChange","target","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","GoogleAuthProvider","App","todos","setTodos","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","todoObj","set","delete","key","text","add","timestamp","FieldValue","serverTimestamp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRAUiBA,MARjB,WACI,OACE,yBAAKC,UAAU,kBACb,0CCgBSC,MAnBjB,YAAmD,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WAChC,OACE,yBACEJ,UAAU,gBACVK,MAAO,CAAEC,eAAgBJ,EAAKK,KAAKC,KAAO,eAAiB,KAC3D,2BAAOR,UAAU,yBAAyBE,EAAKK,KAAKL,MAEpD,yBAAKF,UAAU,oBACb,4BACAA,UAAU,yGACVS,QAAS,kBAAMN,EAAaD,KAF5B,IAEqCA,EAAKK,KAAKC,KAAO,aAAe,YACrE,4BACAR,UAAU,yGACVS,QAAS,kBAAML,EAAWF,EAAKQ,MAF/B,QCgBOC,MA1BjB,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EACDC,mBAAS,IADR,mBACpBC,EADoB,KACbC,EADa,KAGrBC,EAAe,SAAAC,GACnBA,EAAEC,iBACGJ,IACLF,EAAQE,GACRC,EAAS,MAGX,OACE,0BAAMI,SAAUH,GACd,2BACEI,KAAK,OACLpB,UAAU,6HACVqB,YAAY,8CACZP,MAAOA,EACPQ,SAAU,SAAAL,GAAC,OAAIF,EAASE,EAAEM,OAAOT,UAEnC,yBAAKd,UAAU,QACf,4BAAQA,UAAU,uEAAuES,QAASO,GAAlG,Y,gBCTFQ,EADcC,IAASC,cAXN,CACnBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIIC,YAKRX,GAJFC,IAASW,OACL,IAAIX,IAASW,KAAKC,mBAGpBb,GCqDAc,MA7Df,WAAgB,IAAD,EAEazB,mBAAS,IAFtB,mBAEN0B,EAFM,KAECC,EAFD,KAIbC,qBAAU,WACRjB,EAAGkB,WAAW,SACbC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GAAQ,OAChBL,EAASK,EAASC,KAAKC,KAAK,SAAAC,GAAG,MAC3B,CAACtC,GAAIsC,EAAItC,GAAIH,KAAMyC,EAAIzC,iBAI9B,IAIH,IAQMJ,EAAe,SAAA8C,GACnBzB,EAAGkB,WAAW,SAASM,IAAIC,EAAQvC,IAAIwC,IACrC,CACEhD,KAAM+C,EAAQ1C,KAAKL,KAAMM,MAAMyC,EAAQ1C,KAAKC,QAK5CJ,EAAa,SAAAM,GACjBc,EAAGkB,WAAW,SAASM,IAAItC,GAAIyC,UAGjC,OACE,yBAAKnD,UAAU,gCAEf,yBAAKA,UAAU,8CAEb,6BACA,kBAAC,EAAD,MACGuC,EAAMQ,KAAI,SAAC7C,GAAD,OACT,kBAAC,EAAD,CACEkD,IAAKlD,EAAKQ,GACVR,KAAMA,EACNC,aAAcA,EACdC,WAAYA,OAGhB,kBAAC,EAAD,CAAUQ,QAnCA,SAAAyC,GACd7B,EAAGkB,WAAW,SAASY,IAAI,CACzBC,UAAW9B,IAASU,UAAUqB,WAAWC,kBACzCjD,MAAK,EACLN,KAAKmD,WCpBSK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.60cb8c3d.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction Title(){\n    return(\n      <div className=\"title text-5xl\">\n        <h1>Todo app</h1>\n      </div>\n    )\n  }\n\n  export default Title","import React from \"react\"\n\nfunction Todo({ todo, completeTodo, removeTodo }) {\n    return (\n      <div\n        className=\"todo border-2\"\n        style={{ textDecoration: todo.data.done ? \"line-through\" : \"\" }}>\n        <label className=\".text-xl .break-words\">{todo.data.todo}</label>\n  \n        <div className=\"md:flex-shrink-0\">\n          <button\n          className=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\"\n          onClick={() => completeTodo(todo)}> {todo.data.done ? \"Uncomplete\" : \"Complete\"}</button>\n          <button \n          className=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\"\n          onClick={() => removeTodo(todo.id)}>x</button>\n        </div>\n      </div>\n    );\n  }\n\n  export default Todo","import React, { useState } from \"react\"\n\n\nfunction TodoForm({ addTodo }) {\n    const [value, setValue] = useState(\"\");\n  \n    const handleSubmit = e => {\n      e.preventDefault();\n      if (!value) return;\n      addTodo(value);\n      setValue(\"\");\n    };\n  \n    return (\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          placeholder=\"Enter an item and press Enter or Add button\"\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n        <div className=\"py-2\">\n        <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" onClick={handleSubmit}> Add </button>\n        </div>\n      </form>\n    );\n  }\n\n  export default TodoForm","import firebase from \"firebase\"\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyASzQbwCMeKVB1ivtLrLUC2lC4LVzy5BkM\",\n    authDomain: \"my-todo-app-a4bf2.firebaseapp.com\",\n    databaseURL: \"https://my-todo-app-a4bf2.firebaseio.com\",\n    projectId: \"my-todo-app-a4bf2\",\n    storageBucket: \"my-todo-app-a4bf2.appspot.com\",\n    messagingSenderId: \"696490217141\",\n    appId: \"1:696490217141:web:5d87b9dc452a316f6eb8fc\",\n    measurementId: \"G-BJPMK0652R\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\nconst db = firebaseApp.firestore()\nconst auth = firebase.auth()\nconst provider = new firebase.auth.GoogleAuthProvider()\n\nexport{auth, provider}\nexport default db","import React, { useState } from \"react\";\nimport \"./styles/App.css\";\nimport './tailwind.output.css';\nimport Title from \"./components/Title\";\nimport Todo from \"./components/Todo\";\nimport TodoForm from \"./components/TodoForm\";\nimport { useEffect } from \"react\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\n\n\nfunction App() {\n\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    db.collection(\"todos\")\n    .orderBy(\"timestamp\", \"desc\")\n    .onSnapshot(snapshot => (\n        setTodos(snapshot.docs.map( doc => (\n            {id: doc.id, data: doc.data()}\n          )\n        ))\n    ))\n  }, [])\n\n\n\n  const addTodo = text => {\n    db.collection(\"todos\").add({\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      done:false,\n      todo:text\n    })\n  };\n\n  const completeTodo = todoObj => {\n    db.collection(\"todos\").doc(todoObj.id).set(\n      {\n        todo: todoObj.data.todo, done:!todoObj.data.done\n       }\n    )\n  };\n\n  const removeTodo = id => {\n    db.collection(\"todos\").doc(id).delete()\n  };\n\n  return (\n    <div className=\"lg:container lg:mx-auto px-4\">\n\n    <div className=\"max-w-sm rounded overflow-hidden shadow-lg\">\n\n      <div>\n      <Title/>\n        {todos.map((todo) => (\n          <Todo\n            key={todo.id}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n\n    </div>\n\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}